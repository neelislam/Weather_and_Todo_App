import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart'; // For state management (theme)
import 'firebase_options.dart'; // This file is crucial and generated by FlutterFire
import 'sign_in_page.dart';
import 'weather_home.dart'; // This import now also brings in ThemeProvider

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  //Initialize Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  //Load the initial theme preference from SharedPreferences using ThemeProvider from weather_home.dart
  final themeProvider = ThemeProvider(await ThemeProvider.getInitialThemeMode());

  runApp(
    // Provide the ThemeProvider to the entire application
    ChangeNotifierProvider<ThemeProvider>(
      create: (_) => themeProvider,
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    // Watch for theme changes from the ThemeProvider
    final themeProvider = Provider.of<ThemeProvider>(context);

    return MaterialApp(
      title: 'Forecast First Aid',
      debugShowCheckedModeBanner: false,
      theme: themeProvider.currentTheme, //apply the current theme (light or dark)
      home: StreamBuilder<User?>(
        stream: FirebaseAuth.instance.authStateChanges(), //Listen to auth state
        builder: (context, snapshot) {
          // If the connection to the auth stream is active
          if (snapshot.connectionState == ConnectionState.active) {
            User? user = snapshot.data;
            if(user == null){
              // Pass the actual isDarkMode and toggleTheme from the themeProvider
              return SignInPage(
                isDarkMode: themeProvider.isDarkMode,
                toggleTheme: themeProvider.toggleTheme,
              );
            }
            else{
              return const WeatherApp(); // Added const for better performance
            }
          }
          //While waiting for the authentication state, show a loading indicator
          return const Scaffold( // Added const for better performance
            body: Center(
              child: LinearProgressIndicator(),
            ),
          );
        },
      ),
    );
  }
}